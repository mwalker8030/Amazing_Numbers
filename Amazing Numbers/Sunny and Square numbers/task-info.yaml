type: edu
files:
- name: src/numbers/Main.java
  visible: true
  text: |
    package numbers;

    public class Main {
        public static void main(String[] args) {
    //        write your code here
        }
    }
  learner_created: false
- name: test/util/Checker.java
  visible: false
  text: |
    package util;

    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.text.MessageFormat;
    import java.util.function.Predicate;
    import java.util.function.UnaryOperator;

    import static java.util.Objects.isNull;

    public class Checker implements UnaryOperator<UserProgram> {
        protected Predicate<UserProgram> validator;
        protected String feedback;
        protected Object[] parameters;

        protected Checker() {
            this("Incorrect output for user input: {0}.");
        }

        protected Checker(String feedback) {
            this($ -> true, feedback);
        }

        public Checker(Predicate<UserProgram> validator, String feedback) {
            this.feedback = feedback;
            this.validator = validator;
        }

        @Override
        public UserProgram apply(UserProgram program) {
            if (validator.test(program)) {
                return program;
            }
            throw new WrongAnswer(MessageFormat.format(feedback, isNull(parameters)
                    ? new Object[]{program.getInput(), program.getOutput()} : parameters));

        }

    }
  learner_created: false
- name: test/util/LinesChecker.java
  visible: false
  text: |
    package util;

    import static java.util.function.Predicate.not;

    public class LinesChecker extends Checker {

        public LinesChecker(final long expected) {
            super("Expected {0} non blank lines but actual output contains {1} lines.");

            validator = program -> {
                final var actual = program.getOutput().lines().filter(not(String::isBlank)).count();
                parameters = new Object[]{expected, actual};
                return actual == expected;
            };
        }


    }
  learner_created: false
- name: test/util/RegexChecker.java
  visible: false
  text: |
    package util;

    import java.util.regex.Pattern;

    public class RegexChecker extends Checker {
        private final Pattern expected;

        public RegexChecker(final String regexp, final String feedback) {
            this(regexp, Pattern.CASE_INSENSITIVE, feedback);
        }

        public RegexChecker(final String regexp, final int flags, final String feedback) {
            super(feedback);
            this.expected = Pattern.compile(regexp, flags);
            validator = program -> expected.matcher(program.getOutput()).find();
        }

    }
  learner_created: false
- name: test/util/TextChecker.java
  visible: false
  text: |
    package util;

    public class TextChecker extends Checker {

        public TextChecker(String expected) {
            this(expected, "Expected that the output contains \"{2}\".");
        }

        public TextChecker(String expected, String feedback) {
            super(feedback);

            validator = program -> {
                parameters = new Object[]{program.getInput(), program.getOutput(), expected};
                return program.getOutput().toLowerCase().contains(expected.toLowerCase());
            };
        }

    }
  learner_created: false
- name: test/util/UserProgram.java
  visible: false
  text: |-
    package util;

    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.function.Function;

    public class UserProgram {
        private TestedProgram program;

        private Object input;
        private String output;

        public UserProgram start(String... args) {
            program = new TestedProgram();
            output = program.start(args);
            return this;
        }

        public UserProgram check(final Function<UserProgram, UserProgram> checker) {
            return checker.apply(this);
        }

        public CheckResult result() {
            return CheckResult.correct();
        }

        public UserProgram execute(Object userInput) {
            this.input = userInput;
            output = program.execute(userInput.toString());
            return this;
        }

        public String getOutput() {
            return output;
        }

        public Object getInput() {
            return input;
        }

        public boolean isFinished() {
            return program.isFinished();
        }
    }
  learner_created: false
- name: test/ListChecker.java
  visible: false
  text: |
    import util.Checker;
    import util.UserProgram;

    import java.util.Arrays;
    import java.util.Set;
    import java.util.function.LongPredicate;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;
    import java.util.stream.LongStream;

    public class ListChecker extends Checker {
        private static final Pattern LINE_PATTERN = Pattern.compile(
                "\\s*(?<number>[\\d,. ]*\\d)\\s*(is|:|-)\\s*(?<properties>.+)",
                Pattern.CASE_INSENSITIVE);
        private static final Pattern NON_DIGIT_SYMBOL = Pattern.compile("\\D");
        private static final Pattern PROPERTIES_SEPARATOR = Pattern.compile("[, ;]+");

        private final long expectedCount;
        private final long[] expectedList;

        public ListChecker(Request request) {
            this(request.getStart(), request.getCount(), request.getProperties());
        }

        public ListChecker(long start, long count) {
            this(start, count, new String[0]);
        }

        public ListChecker(long start, long count, String properties) {
            this(start, count, properties.split("[, ]+"));
        }

        public ListChecker(long start, long count, String[] queries) {
            super("The list is incorrect");
            this.validator = this::test;
            this.expectedList = getExpectedList(start, count, queries);
            this.expectedCount = count;
        }

        private static long[] getExpectedList(long start, long count, String[] queries) {
            final var condition = Arrays.stream(queries).map(query -> {
                final var isNegative = query.startsWith("-");
                final var name = isNegative ? query.substring(1) : query;
                final var property = NumberProperty.valueOf(name.toUpperCase());
                return isNegative ? property.negate() : property;
            }).reduce(number -> true, LongPredicate::and);

            return LongStream
                    .iterate(start, n -> n > 0, n -> n + 1)
                    .filter(condition).limit(count).toArray();
        }

        public boolean test(UserProgram program) {
            final var lines = program.getOutput()
                    .lines()
                    .filter(Predicate.not(String::isBlank))
                    .limit(expectedCount)
                    .collect(Collectors.toUnmodifiableList());

            if (lines.size() != expectedCount) {
                return false;
            }

            final var iterator = lines.iterator();
            for (final long expectedNumber : expectedList) {
                final var actualLine = iterator.next();
                final var matcher = LINE_PATTERN.matcher(actualLine);
                if (!matcher.matches()) {
                    feedback = "Can''t parse line: \"{0}\". Expected: {1} is ...";
                    parameters = new Object[]{actualLine, expectedNumber};
                    return false;
                }

                final var rawNumber = matcher.group("number").strip();
                final var actualNumber = NON_DIGIT_SYMBOL.matcher(rawNumber).replaceAll("");

                if (!String.valueOf(expectedNumber).equals(actualNumber)) {
                    feedback = "Expected number is {0} but actual number is {1}.";
                    parameters = new Object[]{expectedNumber, rawNumber};
                    return false;
                }

                final var actualProperties = PROPERTIES_SEPARATOR
                        .splitAsStream(matcher.group("properties").toLowerCase())
                        .collect(Collectors.toUnmodifiableList());

                final var expectedProperties = Arrays
                        .stream(NumberProperty.values())
                        .filter(property -> property.test(expectedNumber))
                        .map(Enum::name)
                        .map(String::toLowerCase)
                        .collect(Collectors.toUnmodifiableSet());

                if (actualProperties.size() != expectedProperties.size()) {
                    feedback = "For the number {0} the expected number of properties is {1} but the actual number of properties is {2}. " +
                            "Expected properties are {3}. Actual properties are {4}";
                    parameters = new Object[]{expectedNumber, expectedProperties.size(),
                            actualProperties.size(), expectedProperties, actualProperties};
                    return false;
                }

                if (!Set.copyOf(actualProperties).equals(expectedProperties)) {
                    feedback = "For the number {0} the expected properties are {1}. The actual properties are {2}.";
                    parameters = new Object[]{expectedNumber, expectedProperties, actualProperties};
                }
            }
            return true;
        }
    }
  learner_created: false
- name: test/NumberProperty.java
  visible: false
  text: |
    import java.util.Optional;
    import java.util.function.LongPredicate;
    import java.util.regex.Pattern;
    import java.util.stream.LongStream;

    import static java.lang.Character.getNumericValue;

    public enum NumberProperty implements LongPredicate {
        BUZZ(number -> number % 7 == 0 || number % 10 == 7),
        DUCK(number -> digits(number).anyMatch(digit -> digit == 0)),
        PALINDROMIC(number -> {
            final var digits = String.valueOf(number);
            return new StringBuilder(digits).reverse().toString().equals(digits);
        }),
        GAPFUL(number -> number >= 100 &&
                number % (getNumericValue(String.valueOf(number).charAt(0)) * 10L + number % 10) == 0),
        SPY(number -> {
            long sum = 0, product = 1;
            for (long rest = number; rest > 0; rest /= 10) {
                long digit = rest % 10;
                product *= digit;
                if (product == 0) {
                    return false;
                }
                sum += digit;
            }
            return sum == product;
        }),
        SQUARE(number -> Math.sqrt(number) % 1 == 0),
        SUNNY(number -> Math.sqrt(number + 1) % 1 == 0),
        EVEN(number -> number % 2 == 0),
        ODD(number -> number % 2 != 0);

        private final LongPredicate hasProperty;
        private final Pattern pattern = Pattern.compile(
                name() + "\\s*[:-]\\s*(?<value>true|false)",
                Pattern.CASE_INSENSITIVE
        );

        NumberProperty(LongPredicate hasProperty) {
            this.hasProperty = hasProperty;
        }

        private static LongStream digits(long number) {
            return Long.toString(number).chars().mapToLong(Character::getNumericValue);
        }

        @Override
        public boolean test(long number) {
            return hasProperty.test(number);
        }

        public Optional<Boolean> extractValue(String output) {
            final var matcher = pattern.matcher(output);
            final var isFound = matcher.find();
            return Optional
                    .ofNullable(isFound ? matcher.group("value") : null)
                    .map(Boolean::valueOf);
        }

    }
  learner_created: false
- name: test/NumbersTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import util.*;

    import java.util.*;
    import java.util.function.Function;
    import java.util.function.Predicate;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    import java.util.stream.LongStream;
    import java.util.stream.Stream;

    import static java.util.stream.IntStream.range;

    public final class NumbersTest extends StageTest {
        private static final Random random = new Random();

        private static final int NEGATIVE_NUMBERS_TESTS = 5;
        private static final int FIRST_NUMBERS = 15;
        private static final int RANDOM_TESTS = 10;
        private static final int MAX_PROPERTIES = 2;
        private static final int MAX_COUNT = 20;
        private static final int MIN_START = 2;

        private static final Checker WELCOME = new TextChecker("Welcome to Amazing Numbers!");

        private static final String EXPLAIN = "The program should explain this in the help.";
        private static final Function<UserProgram, UserProgram> HELP =
                new TextChecker("Supported requests")
                        .andThen(new RegexChecker(
                                "(one|a) natural number",
                                "In this stage, a user can enter one number to print a card. " + EXPLAIN))
                        .andThen(new TextChecker(
                                "two natural numbers",
                                "In this stage, a user can enter two numbers to print a list. " + EXPLAIN))
                        .andThen(new TextChecker(
                                "properties to search for",
                                "In this stage, a user can enter two numbers and properties to search for. "
                                        + EXPLAIN))
                        .andThen(new TextChecker(
                                "enter 0 to exit",
                                "Display the instructions on how to exit"));

        private static final Checker ASK_REQUEST = new RegexChecker(
                "enter a request",
                "The program should ask a user to enter a request."
        );
        private static final Checker ERROR_FIRST = new RegexChecker(
                "The first (parameter|number) should be a natural number or zero",
                "The first parameter \"{0}\" is wrong. The program should print an error message."
        );
        private static final Checker ERROR_SECOND = new RegexChecker(
                "The second parameter should be a natural number",
                "The second parameter \"{0}\" is wrong. The program should print an error message."
        );
        private static final Checker ERROR_PROPERTY = new RegexChecker(
                "The property .+ is wrong",
                "The request: \"{0}\" has one wrong property. "
                        + "Expected message: \"The property ... is wrong\"."
        );
        private static final Checker ERROR_PROPERTIES = new RegexChecker(
                "The properties .+ are wrong",
                "The request: \"{0}\" has two or more incorrect properties. "
                        + "Expected that error message contains: \"The properties ... are wrong\"."
        );
        private static final Checker HELP_PROPERTIES = new TextChecker(
                "Available properties"
        );
        private static final Checker LIST_PROPERTIES = new Checker(
                program -> Arrays.stream(NumberProperty.values())
                        .map(Enum::name)
                        .map("(?i)\\b"::concat)
                        .map(Pattern::compile)
                        .map(p -> p.matcher(program.getOutput()))
                        .allMatch(Matcher::find),
                "If incorrect property has been specified, show the list of the available properties."
        );
        private static final Checker PROPERTIES_OF = new RegexChecker(
                "properties of \\d",
                "The first line of number''s properties should contain \"Properties of {0}\"."
        );
        private static final Checker MUTUALLY_EXCLUSIVE = new TextChecker(
                "The request contains mutually exclusive properties",
                "The request contains mutually exclusive properties. "
                        + "The program should cancel the request and warn the user."
        );
        private static final Checker RUNNING = new Checker(Predicate.not(UserProgram::isFinished),
                "The program should continue to work till the user enter \"0\"."
        );
        private static final Checker FINISHED = new Checker(UserProgram::isFinished,
                "The program should finish when the user entered \"0\"."
        );
        private final UserProgram program = new UserProgram();

        private final String[] wrongProperty = new String[]{
                "1 10 May", "40 2 bay", "37 4 8", "67 2 day", "2 54 Prime", "6 8 ...", "5 9 none"
        };
        private final String[] wrongSecondProperty = new String[]{
                "1 10 odd girl", "40 2 even day", "37 4 spy 89", "67 2 DUCK +"
        };
        private final String[] wrongTwoProperties = new String[]{
                "1 10 boy friend", "40 2 long day", "37 4 hot girl", "67 2 strong drake"
        };
        private final String[] mutuallyExclusive = new String[]{
                // Stage #6 Two properties
                "5 1 odd even", "4 3 even odd", "32 2 sunny square", "2341 4 square sunny", "3153 2 spy duck", "6 7 duck spy"
        };
        // Stage #3

        @DynamicTest(order = 5)
        CheckResult welcomeTest() {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(repeat = NEGATIVE_NUMBERS_TESTS, order = 10)
        CheckResult notNaturalNumbersTest() {
            long negativeNumber = -random.nextInt(Byte.MAX_VALUE) - 1L;
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(negativeNumber)
                    .check(ERROR_FIRST)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(repeat = RANDOM_TESTS, order = 15)
        CheckResult notNaturalSecondNumberTest() {
            int first = 1 + random.nextInt(Short.MAX_VALUE);
            int negativeSecond = -random.nextInt(Short.MAX_VALUE);
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(first + " " + negativeSecond)
                    .check(ERROR_SECOND)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        // Stage #4

        @DynamicTest(order = 20)
        CheckResult naturalNumbersTest() {
            final var numbers = LongStream.concat(
                    LongStream.range(1, FIRST_NUMBERS),
                    random.longs(RANDOM_TESTS, 1, Long.MAX_VALUE)
            );

            program.start().check(WELCOME).check(HELP);

            numbers.forEach(number -> program
                    .check(ASK_REQUEST)
                    .execute(number)
                    .check(PROPERTIES_OF)
                    .check(new PropertiesChecker(number))
                    .check(RUNNING));

            return program
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(order = 40)
        CheckResult firstNumbersListTest() {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute("1 " + FIRST_NUMBERS)
                    .check(new LinesChecker(FIRST_NUMBERS + 1))
                    .check(new ListChecker(1, FIRST_NUMBERS))
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        private Object[][] getRandomTwo() {
            return random
                    .longs(RANDOM_TESTS, MIN_START, Long.MAX_VALUE - MAX_COUNT)
                    .mapToObj(start -> new Long[]{start, (long) 1 + random.nextInt(MAX_COUNT)})
                    .toArray(Long[][]::new);
        }

        // Stage #5

        @DynamicTest(data = "getRandomTwo", order = 44)
        CheckResult twoRandomNumbersTest(long start, long count) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(start + " " + count)
                    .check(new LinesChecker(count + 1))
                    .check(new ListChecker(start, count))
                    .check(RUNNING)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(data = "wrongProperty", order = 50)
        CheckResult wrongPropertyRequestTest(String wrongProperty) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(wrongProperty)
                    .check(ERROR_PROPERTY)
                    .check(HELP_PROPERTIES)
                    .check(LIST_PROPERTIES)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        // The test generates and checks request "1 10 <property>" for each property

        @DynamicTest(order = 53)
        CheckResult allPropertiesTest() {
            program.start().check(WELCOME).check(HELP);

            Arrays.stream(NumberProperty.values())
                    .map(Enum::name)
                    .map("1 10 "::concat)
                    .map(Request::new)
                    .peek(program.check(ASK_REQUEST)::execute)
                    .forEach(request -> program
                            .check(request.getLinesChecker())
                            .check(new ListChecker(request))
                            .check(RUNNING)
                    );

            return program.execute(0).check(FINISHED).result();
        }

        // Stage #6

        @DynamicTest(repeat = RANDOM_TESTS, order = 55)
        CheckResult randomTwoNumbersAndPropertyTest() {
            final var request = Request.random(Request.Parameter.THREE);
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(request)
                    .check(request.getLinesChecker())
                    .check(new ListChecker(request))
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(data = "wrongSecondProperty", order = 60)
        CheckResult wrongSecondPropertyRequestTest(String wrongSecondProperty) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(wrongSecondProperty)
                    .check(ERROR_PROPERTY)
                    .check(HELP_PROPERTIES)
                    .check(LIST_PROPERTIES)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(data = "wrongTwoProperties", order = 62)
        CheckResult wrongTwoPropertiesRequestTest(String wrongTwoProperties) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(wrongTwoProperties)
                    .check(ERROR_PROPERTIES)
                    .check(HELP_PROPERTIES)
                    .check(LIST_PROPERTIES)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        private Request[] searchTwoProperties() {
            return Stream.of(
                    "1 7 even spy",
                    "1 10 odd buzz",
                    "1 9 buzz gapful",
                    "1 10 spy buzz",
                    "100000 2 even spy",
                    "100 4 odd gapful",
                    "2000 4 palindromic duck")
                    .map(Request::new)
                    .toArray(Request[]::new);
        }

        @DynamicTest(data = "searchTwoProperties", order = 65)
        CheckResult twoNumbersAndTwoPropertyTest(Request request) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(request)
                    .check(request.getLinesChecker())
                    .check(new ListChecker(request))
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        private String getWrongRequest() {
            final var start = 1 + random.nextInt(Short.MAX_VALUE);
            final var count = 1 + random.nextInt(MAX_COUNT);

            final var properties = new ArrayList<String>();
            final var incorrect = new String[]{
                    "bAY", "Boy", "~~", "...", "242", "&hj", "simple", "evens",
                    "speck", "_odd_", "reverse", "gipful", "buzzz", "drake"
            };
            properties.add(incorrect[random.nextInt(incorrect.length)]);

            final var correct = new ArrayList<>(List.of(NumberProperty.values()));
            Collections.shuffle(correct);
            range(0, random.nextInt(2))
                    .mapToObj(correct::get)
                    .map(Enum::name)
                    .forEach(properties::add);
            Collections.shuffle(properties);

            return start + " " + count + " " + String.join(" ", properties);
        }

        @DynamicTest(repeat = RANDOM_TESTS, order = 70)
        CheckResult wrongPropertiesRequestTest() {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(getWrongRequest())
                    .check(ERROR_PROPERTY)
                    .check(HELP_PROPERTIES)
                    .check(LIST_PROPERTIES)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        private Request[] getRandomRequests() {
            return Stream.of(
                    "1 7 spy palindromic",
                    "1 10 palindromic buzz",
                    "1 9 even palindromic",
                    "1 10 even sunny",
                    "100000 2 buzz gapful",
                    "100 4 odd spy",
                    "2000 4 palindromic duck"
            )
                    .map(Request::new)
                    .toArray(Request[]::new);
        }

        @DynamicTest(data = "getRandomRequests", order = 65)
        CheckResult manyPropertiesTest(Request request) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(request)
                    .check(request.getLinesChecker())
                    .check(new ListChecker(request))
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(data = "mutuallyExclusive", order = 80)
        CheckResult mutuallyExclusivePropertiesTest(String mutuallyExclusive) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(mutuallyExclusive)
                    .check(MUTUALLY_EXCLUSIVE)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

    }
  learner_created: false
- name: test/PropertiesChecker.java
  visible: false
  text: |
    import util.Checker;
    import util.UserProgram;

    public class PropertiesChecker extends Checker {
        private final long number;

        public PropertiesChecker(long number) {
            this.number = number;
            validator = this::test;
        }

        public boolean test(UserProgram program) {
            for (var property : NumberProperty.values()) {
                final var name = property.name();

                if (!program.getOutput().toLowerCase().contains(name.toLowerCase())) {
                    feedback = "The property \"{0}\" was not found in the output.";
                    parameters = new Object[]{name};
                    return false;
                }

                final var expected = property.test(number);
                final var actualValue = property.extractValue(program.getOutput());

                if (actualValue.isEmpty()) {
                    feedback = "The value for property {0} was not found. Expected: {1}";
                    parameters = new Object[]{name, expected};
                    return false;
                }
                final var actual = actualValue.get();

                if (expected != actual) {
                    feedback = "For the property {0}, the expected value is {1} but was found {2}.";
                    parameters = new Object[]{name, expected, actual};
                    return false;
                }
            }
            return true;
        }
    }
  learner_created: false
- name: test/Request.java
  visible: false
  text: |
    import util.LinesChecker;

    import java.util.Random;
    import java.util.regex.Pattern;

    public class Request {
        public static final Pattern PARAMETERS_SEPARATOR = Pattern.compile("\\s+");
        public static final int MAX_COUNT = 20;
        private static final Random random = new Random();

        private final String request;
        private final long start;
        private final int count;
        private String[] properties;

        public Request(String request) {
            this.request = request;
            var data = PARAMETERS_SEPARATOR.split(request, 3);
            int type = data.length;
            properties = type == 3 ? PARAMETERS_SEPARATOR.split(data[2]) : new String[0];
            count = type > 1 ? Integer.parseInt(data[1]) : 0;
            start = Long.parseLong(data[0]);
        }

        public static Request random(Parameter params) {
            final var start = 1 + random.nextInt(Short.MAX_VALUE);
            if (params == Parameter.ONE) {
                return new Request(String.valueOf(start));
            }
            final var count = 1 + random.nextInt(MAX_COUNT);
            if (params == Parameter.TWO) {
                return new Request(start + " " + count);
            }
            final var index = random.nextInt(NumberProperty.values().length);
            final var property = NumberProperty.values()[index].name();
            final var request = start + " " + count + " " + property;
            return new Request(request);
        }

        public long getStart() {
            return start;
        }

        public int getCount() {
            return count;
        }

        public String[] getProperties() {
            return properties;
        }

        public LinesChecker getLinesChecker() {
            return new LinesChecker(count + 1);
        }

        @Override
        public String toString() {
            return request;
        }

        enum Parameter {ONE, TWO, THREE}
    }
  learner_created: false
- name: src/numbers/SpecificNums.java
  visible: true
  text: |
    package numbers;

    public class SpecificNums {
        public enum NumType{
            BUZZ(0, "buzz"),
            DUCK(1, "duck"),
            PALINDROMIC(2, "palindromic"),
            GAPFUL(3, "gapful"),
            SPY(4, "spy"),
            EVEN(5, "even"),
            ODD(6, "odd"),
            DEFAULT(7, "default");

            private int index;
            private String title;
            private NumType(int num, String str){
                index = num;
                title = str;
            }

            public static NumType getType(String s) {
                return SpecificNums.NumType.valueOf(s.toUpperCase());
            }

            public int numType(){
                return index;
            }

            public int numType(String str){
                for(SpecificNums.NumType t : SpecificNums.NumType.values()){
                    if(t.toString().equals(str)){
                        return t.numType();
                    }
                }
                return NumType.DEFAULT.numType();
            }



        }
    }
  learner_created: true
- name: src/numbers/MagicDetector.java
  visible: true
  text: "package numbers;\n\npublic class MagicDetector{\n    private boolean[] isMagic;\n\
    \    private long MAGICNUM;\n    private StringBuilder msg;\n\n    MagicDetector(){\n\
    \        isMagic = new boolean[]{false, false};\n        MAGICNUM = 7;\n     \
    \   msg = new StringBuilder();\n    }\n\n    public boolean detectMagic(long num){\n\
    \        resetMagic();\n        if(num % MAGICNUM == 0){\n            //magic\
    \ number is detected\n            isMagic[0] = true;\n        }\n        //else\
    \ if(magicCalculated(num)){\n        //    isMagic[0] = true;\n        //}\n\n\
    \        if(num % 10 == MAGICNUM){\n            isMagic[1] = true;\n        }\n\
    \n        return finalAnalysis(num);\n    }\n\n    private void resetMagic() {\n\
    \        isMagic[0] = false;\n        isMagic[1] = false;\n    }\n\n    private\
    \ boolean finalAnalysis(long num) {\n\n        if (isMagic[0] || isMagic[1]){\n\
    \            return true;\n        }\n\n        return false;\n    }\n\n    private\
    \ boolean magicCalculated(long num) {\n        long remainder = 0, diff = 0, temp\
    \ = num;\n        do{\n            //take last number\n            remainder =\
    \ temp % 10;\n            temp /= 10.0;\n            //multiply it by 2\n    \
    \        remainder *= 2;\n            //subtract whatever was left over by result\n\
    \            temp -= remainder;\n            //if result is not 7 or less\n  \
    \          if(temp%MAGICNUM == 0){\n                return true;\n           \
    \ }\n\n        }while(temp > 10);\n        return false;\n    }\n    \n    \n\n\
    \n}\n"
  learner_created: true
- name: src/numbers/OddDetector.java
  visible: true
  text: |
    package numbers;

    public class OddDetector{
        private boolean isOdd;

        OddDetector(){
            isOdd = false;
        }

        public boolean evenOrOdd(long num){
            return num % 2 != 0;
        }
    }
  learner_created: true
- name: src/numbers/DuckDetector.java
  visible: true
  text: |
    package numbers;

    public class DuckDetector {
        private boolean isDuck;
        private long temp;
        private long duck;

        DuckDetector(){temp = 0; duck = 0;}

        public boolean detectDucking(long num) {
            temp = num;
            while(temp > 0){
                duck = temp % 10;
                temp /= 10;
                if(duck == 0){return true;}
            }
            return false;
        }
    }
  learner_created: true
- name: src/numbers/GapDetector.java
  visible: true
  text: |
    package numbers;

    public class GapDetector {
        private long divisor;

        GapDetector(){
            divisor = 10;
        }

        public boolean detectGap(long num){
            if(num >= 100){
                divisor = getDivisor(num);
                return num % divisor == 0;
            }
            return false;
        }

        private long getDivisor(long num) {
            long temp = num % 10;
            long prev = num;
            while(prev >= 10){
                prev /= 10;
            }

            temp += prev * 10;
            return temp;
        }
    }
  learner_created: true
- name: src/numbers/Property.java
  visible: true
  text: |
    package numbers;

    public class Property {
        private String category;
        private Boolean data;
        Property(String str, boolean b){
            this.category = str;
            this.data = b;
        }

        public Property() {
            this.category = "";
            this.data = null;
        }

        protected String getCategory(){ return category; }

        protected boolean getData(){ return data; }

        protected void setData(boolean input){data = input;}
    }
  learner_created: true
- name: src/numbers/UserInputException.java
  visible: true
  text: |
    package numbers;

    public class UserInputException extends Exception{
        UserInputException(String e){
            super(e);
        }
    }
  learner_created: true
- name: src/numbers/User.java
  visible: true
  text: "package numbers;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\
    \npublic class User {\n    private Scanner scan;\n    private StringBuilder input;\n\
    \    private StringBuilder specifics;\n    private ArrayList<String> strArr;\n\
    \    private long value;\n    private long[] values;\n    private ArrayList<Long>\
    \ valueList;\n    private SpecificNums.NumType userNumType;\n    User(){\n   \
    \     scan = new Scanner(System.in);\n        input = new StringBuilder();\n \
    \       specifics = new StringBuilder();\n        strArr = new ArrayList<String>();\n\
    \        value = 0;\n        values = new long[]{0,0};\n        valueList = new\
    \ ArrayList<Long>();\n        userNumType = SpecificNums.NumType.DEFAULT;\n  \
    \      initWelcome();\n    }\n\n    public void getUserInput(){\n        try {\n\
    \            input.setLength(0);\n            valueList.clear();\n           \
    \ System.out.print(\"Enter a request:\");\n            input.append(scan.nextLine());\n\
    \            //separate the string into two parts\n            String[] temp =\
    \ input.toString().split(\" \");\n\n            //assign value to index regardless\
    \ of result\n            if(!isNumber(temp[0])){\n                throw new UserInputException\n\
    \                        (\"\\nThe first parameter should be a natural number\
    \ or zero.\");\n            }\n            values[0] = Long.parseLong(temp[0]);\n\
    \            values[1] = 0;\n            //if there are two parts\n          \
    \  if(temp.length >= 2){\n                //get the sequence amount\n        \
    \        if(!isNumber(temp[1])){\n                    throw new UserInputException(\"\
    \\nsecond parameter should be a natural number\");\n                }\n      \
    \          values[1] = Long.parseLong(temp[1]);\n\n            }\n\n         \
    \   if(temp.length == 3){\n                //get the specified type of number\
    \ to look for\n                if(!isValid(temp[2].toLowerCase())){\n        \
    \            throw new UserInputException(\"\"\"\n                           \
    \ \n                            The property [%s] is wrong.\n                \
    \            Available properties: [EVEN, ODD, BUZZ, DUCK, PALINDROMIC, GAPFUL,\
    \ SPY]\"\"\".formatted(temp[2].toUpperCase()));\n                }\n         \
    \       userNumType = SpecificNums.NumType.getType(temp[2]);\n               \
    \ specifics.append(temp[2].toLowerCase());\n            }else{\n             \
    \   //assign the values to a temporary storage\n                long tempValue\
    \ = values[0];\n                do{\n                    //add each sequence to\
    \ the end of the list\n                    valueList.add(tempValue++);\n     \
    \               //until number of sequences reaches 0\n                } while(values[1]--\
    \ > 1);\n\n                for(Long v : valueList){\n                    if(!isValid(v)){\n\
    \                        throw new UserInputException\n                      \
    \          (\"\\nThe first parameter should be a natural number or zero.\\n\"\
    );\n                    }\n                }\n\n                for (char d :\
    \ input.toString().toCharArray()) {\n                    if (d < '0' || d > '9')\
    \ {\n                        //throw some error\n                        if(d\
    \ != ' ') {\n                            throw new UserInputException\n      \
    \                              (\"\\nThe first parameter should be a natural number\
    \ or zero.\\n\");\n                        }\n                    }\n        \
    \        }\n            }\n\n\n            //for(Long v : valueList){ }\n\n  \
    \      }catch (UserInputException ex){\n            System.out.print(ex.getMessage());\n\
    \        }\n    }\n\n    private boolean isNumber(String s) {\n        for(char\
    \ d : s.toCharArray()){\n            if (d < '0' || d > '9') {\n             \
    \   //throw some error\n                return false;\n            }\n       \
    \ }\n        return true;\n    }\n\n    private boolean isValid(String s) {\n\
    \        for(SpecificNums.NumType t : SpecificNums.NumType.values()){\n      \
    \      if(s.equals(t.toString().toLowerCase())){\n                userNumType\
    \ = t;\n                return true;\n            }\n        }\n        return\
    \ false;\n    }\n\n    private void initWelcome() {\n        System.out.println(\"\
    \"\"\nWelcome to Amazing Numbers!\n\nSupported requests:\n- enter a natural number\
    \ to know its properties;\n- enter two natural numbers to obtain the properties\
    \ of the list:\n  * the first parameter represents a starting number;\n  * the\
    \ second parameters show how many consecutive numbers are to be processed;\n-\
    \ two natural numbers and a property to search for;\n- separate the parameters\
    \ with one space;\n- enter 0 to exit.\n                \"\"\");\n    }\n\n   \
    \ public boolean isValid(Long v) { return v >= 0; }\n\n    public long getStoredValue(){\
    \ return this.value;}\n    public Long getStoredValue(int index){ return this.valueList.get(index);}\n\
    \    public long getUserEntries(int index){ return this.values[index];}\n\n  \
    \  public ArrayList<Long> getValueList(){ return this.valueList;}\n\n    public\
    \ SpecificNums.NumType getUserNumType(){\n        return userNumType;\n    }\n\
    \n    public void resetNumType() {\n        userNumType = SpecificNums.NumType.DEFAULT;\n\
    \    }\n}\n"
  learner_created: true
- name: src/numbers/Properties.java
  visible: true
  text: |
    package numbers;

    import java.util.ArrayList;
    import java.util.Arrays;

    public class Properties {

        public enum Printer{
            SINGLE(1),
            MULTI(2);

            public final int printerType;

            private Printer(int printerType){
                this.printerType = printerType;
            }
        }
        private Printer printer;

        private ArrayList<String> attributes;
        private ArrayList<Property> detailedList;
        private long storedValue;
        private StringBuilder msg;
        private OddDetector oddDetective;

        private MagicDetector mageDetective;
        private DuckDetector duckDetective;
        private Palindrome paliDetective;
        private GapDetector gapDetective;
        private SpyDetector spyDetective;
        private int sequenceCounter;
        public void resetSequenceAndPrinter() {
            sequenceCounter = 0;
            msg.setLength(0);
            printer = Printer.SINGLE;
        }

        public void incrementSequence() { ++sequenceCounter; }

        public void setPrinter(int size) {
            if(size > printer.printerType){
                printer = Printer.MULTI;
            }
        }

        public void setPrinter(long size) {
            if(size > printer.printerType){
                printer = Printer.MULTI;
            }
        }



            interface Detective{

            boolean detect();
        }
        private Detective[] detectives = new Detective[]{
                new Detective(){ public boolean detect(){return mageDetective.detectMagic(storedValue);}},
                new Detective(){ public boolean detect(){return duckDetective.detectDucking(storedValue);}},
                new Detective(){ public boolean detect(){return paliDetective.detectPalindrome(storedValue);}},
                new Detective(){ public boolean detect(){return gapDetective.detectGap(storedValue);}},
                new Detective(){ public boolean detect(){return spyDetective.detectSpy(storedValue);}},
                new Detective(){ public boolean detect(){return !oddDetective.evenOrOdd(storedValue);}},
                new Detective(){ public boolean detect(){return oddDetective.evenOrOdd(storedValue);}}

        };
        Properties(){
            msg = new StringBuilder("");
            initAttributes();
            initDetectives();
            initList();
            this.storedValue = 0;
            this.sequenceCounter = 0;
            printer = Printer.SINGLE;
        }

        private void initAttributes() {
            attributes = new ArrayList<String>(
                    Arrays.asList(
                            "buzz",
                            "duck",
                            "palindromic",
                            "gapful",
                            "spy",
                            "even",
                            "odd"
                    )
            );
        }
        private void initList(){
            detailedList = new ArrayList<Property>();
            while(detailedList.size() < attributes.size()){
                detailedList.add(new Property());
            }
        }

        private void initDetectives(){
            oddDetective = new OddDetector();
            mageDetective = new MagicDetector();
            duckDetective = new DuckDetector();
            paliDetective = new Palindrome();
            gapDetective = new GapDetector();
            spyDetective = new SpyDetector();
        }

        public void analyze(long num){

            storedValue = num;
            for(int i = 0; i < attributes.size(); i++)
                detailedList.set(i, new Property(attributes.get(i),detectives[i].detect()));

            if(printer == Printer.SINGLE)
                saveProperties();
            else
                saveListOfProperties();
            resetList();
        }
        public void analyze(Long val, int numType, long quantity) {
            ArrayList<Integer> nsnt = new ArrayList<Integer>();
            storedValue = val;
            for(int i = 0; i < attributes.size(); i++){
                if ( i != numType){
                    nsnt.add(i);
                }
            }

            for(long i = 0; i < quantity;){

                if(detectives[numType].detect()){
                    detailedList.set(numType, new Property(attributes.get(numType), true));
                    for(int ind : nsnt){
                        detailedList.set(ind, new Property(attributes.get(ind),detectives[ind].detect()));
                    }

                    if(printer == Printer.SINGLE) {
                        saveProperties();
                    }
                    else {
                        saveListOfProperties();
                    }
                    resetList();
                    i++;
                }

                storedValue++;
            }
        }

        public void analyzeList(long num){

            msg = new StringBuilder();

            for(int i = 0; i < attributes.size(); i++)
                detailedList.set(i, new Property(attributes.get(i),detectives[i].detect()));
            saveListOfProperties();
        }

        private void saveProperties() {
            msg.append("\nProperties of %,d\n" .formatted(storedValue));
            for(Property prop : detailedList){
                msg.append("%16.16s: %b\n" .formatted(prop.getCategory(), prop.getData()));
            }
            msg.setLength(msg.length() - 1);
        }

        private void saveListOfProperties() {
            msg.append("\n%,16d is ".formatted(storedValue));
            for(Property prop : detailedList){
                if(prop.getData()){
                    msg.append("%s, " .formatted(prop.getCategory()));
                }
            }

            //remove the last comma
            msg.setLength(msg.length() - 2);
        }

        public void displayProperties() {
            System.out.println(msg.toString() + "\n");
        }

        private void resetList(){
            for(int i = 0; i < attributes.size(); i++)
                detailedList.get(i).setData(false);
        }
        public void storeUserInput(long storedValue) { this.storedValue = storedValue; }
    }
  learner_created: true
- name: src/numbers/Palindrome.java
  visible: true
  text: |
    package numbers;

    public class Palindrome {

        long temp;
        long palindrome;
        Palindrome(){temp = 0; palindrome = 0;}

        protected boolean detectPalindrome(long num){
            initFields(num);
            while(temp > 0){
                palindrome *= 10;
                palindrome += temp % 10;
                temp /= 10;
            }

            return palindrome == num;
        }

        private void initFields(long num){
            temp = num;
            palindrome = 0;
        }
    }
  learner_created: true
- name: src/numbers/SpyDetector.java
  visible: true
  text: |
    package numbers;
    import java.util.ArrayList;
    public class SpyDetector {
        Long temp, sum, product, tempInt;
        ArrayList<Long> intArr;
        SpyDetector(){
            temp = 0L;
            sum = 0L;
            product = 0L;
            intArr = new ArrayList<Long>();
            tempInt = 0L;
        }

        public boolean detectSpy(Long num){
            //initialize important values;
            temp = num;
            sum = 0L;
            product = 1L;
            intArr.clear();

            //for all the digits in the whole value
            while(temp > 0){
                //separate the last digit from the whole num
                tempInt = temp % 10;
                temp /= 10;

                //add the number to the list of products
                intArr.add(tempInt);

                //add the number value to the sum
                sum += tempInt;
            }

            for(Long v : intArr){
                product *= v;
            }

            //return the comparison of Long values
            return sum.equals(product);
        }
    }
  learner_created: true
- name: src/numbers/SquareDetector.java
  visible: true
  learner_created: true
- name: src/numbers/SunDetector.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13203#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 31 Jan 2023 06:15:14 UTC"
record: -1
