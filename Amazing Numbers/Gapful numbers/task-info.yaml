type: edu
files:
- name: src/numbers/Main.java
  visible: true
  text: |
    package numbers;

    public class Main {
        public static void main(String[] args) {
    //        write your code here
        }
    }
  learner_created: false
- name: test/util/Checker.java
  visible: false
  text: |
    package util;

    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.text.MessageFormat;
    import java.util.function.Predicate;
    import java.util.function.UnaryOperator;

    import static java.util.Objects.isNull;

    public class Checker implements UnaryOperator<UserProgram> {
        protected Predicate<UserProgram> validator;
        protected String feedback;
        protected Object[] parameters;

        protected Checker() {
            this("Incorrect output for user input: {0}.");
        }

        protected Checker(String feedback) {
            this($ -> true, feedback);
        }

        public Checker(Predicate<UserProgram> validator, String feedback) {
            this.feedback = feedback;
            this.validator = validator;
        }

        @Override
        public UserProgram apply(UserProgram program) {
            if (validator.test(program)) {
                return program;
            }
            throw new WrongAnswer(MessageFormat.format(feedback, isNull(parameters)
                    ? new Object[]{program.getInput(), program.getOutput()} : parameters));

        }

    }
  learner_created: false
- name: test/util/LinesChecker.java
  visible: false
  text: |
    package util;

    import static java.util.function.Predicate.not;

    public class LinesChecker extends Checker {

        public LinesChecker(final long expected) {
            super("Expected {0} non blank lines but actual output contains {1} lines.");

            validator = program -> {
                final var actual = program.getOutput().lines().filter(not(String::isBlank)).count();
                parameters = new Object[]{expected, actual};
                return actual == expected;
            };
        }


    }
  learner_created: false
- name: test/util/RegexChecker.java
  visible: false
  text: |
    package util;

    import java.util.regex.Pattern;

    public class RegexChecker extends Checker {
        private final Pattern expected;

        public RegexChecker(final String regexp, final String feedback) {
            this(regexp, Pattern.CASE_INSENSITIVE, feedback);
        }

        public RegexChecker(final String regexp, final int flags, final String feedback) {
            super(feedback);
            this.expected = Pattern.compile(regexp, flags);
            validator = program -> expected.matcher(program.getOutput()).find();
        }

    }
  learner_created: false
- name: test/util/TextChecker.java
  visible: false
  text: |
    package util;

    public class TextChecker extends Checker {

        public TextChecker(String expected) {
            this(expected, "Expected that the output contains \"{2}\".");
        }

        public TextChecker(String expected, String feedback) {
            super(feedback);

            validator = program -> {
                parameters = new Object[]{program.getInput(), program.getOutput(), expected};
                return program.getOutput().toLowerCase().contains(expected.toLowerCase());
            };
        }

    }
  learner_created: false
- name: test/util/UserProgram.java
  visible: false
  text: |-
    package util;

    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.function.Function;

    public class UserProgram {
        private TestedProgram program;

        private Object input;
        private String output;

        public UserProgram start(String... args) {
            program = new TestedProgram();
            output = program.start(args);
            return this;
        }

        public UserProgram check(final Function<UserProgram, UserProgram> checker) {
            return checker.apply(this);
        }

        public CheckResult result() {
            return CheckResult.correct();
        }

        public UserProgram execute(Object userInput) {
            this.input = userInput;
            output = program.execute(userInput.toString());
            return this;
        }

        public String getOutput() {
            return output;
        }

        public Object getInput() {
            return input;
        }

        public boolean isFinished() {
            return program.isFinished();
        }
    }
  learner_created: false
- name: test/ListChecker.java
  visible: false
  text: |
    import util.Checker;
    import util.UserProgram;

    import java.util.Arrays;
    import java.util.Set;
    import java.util.function.LongPredicate;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;
    import java.util.stream.LongStream;

    public class ListChecker extends Checker {
        private static final Pattern LINE_PATTERN = Pattern.compile(
                "\\s*(?<number>[\\d,. ]*\\d)\\s*(is|:|-)\\s*(?<properties>.+)",
                Pattern.CASE_INSENSITIVE);
        private static final Pattern NON_DIGIT_SYMBOL = Pattern.compile("\\D");
        private static final Pattern PROPERTIES_SEPARATOR = Pattern.compile("[, ;]+");

        private final long expectedCount;
        private final long[] expectedList;

        public ListChecker(Request request) {
            this(request.getStart(), request.getCount(), request.getProperties());
        }

        public ListChecker(long start, long count) {
            this(start, count, new String[0]);
        }

        public ListChecker(long start, long count, String properties) {
            this(start, count, properties.split("[, ]+"));
        }

        public ListChecker(long start, long count, String[] queries) {
            super("The list is incorrect");
            this.validator = this::test;
            this.expectedList = getExpectedList(start, count, queries);
            this.expectedCount = count;
        }

        private static long[] getExpectedList(long start, long count, String[] queries) {
            final var condition = Arrays.stream(queries).map(query -> {
                final var isNegative = query.startsWith("-");
                final var name = isNegative ? query.substring(1) : query;
                final var property = NumberProperty.valueOf(name.toUpperCase());
                return isNegative ? property.negate() : property;
            }).reduce(number -> true, LongPredicate::and);

            return LongStream
                    .iterate(start, n -> n > 0, n -> n + 1)
                    .filter(condition).limit(count).toArray();
        }

        public boolean test(UserProgram program) {
            final var lines = program.getOutput()
                    .lines()
                    .filter(Predicate.not(String::isBlank))
                    .limit(expectedCount)
                    .collect(Collectors.toUnmodifiableList());

            if (lines.size() != expectedCount) {
                return false;
            }

            final var iterator = lines.iterator();
            for (final long expectedNumber : expectedList) {
                final var actualLine = iterator.next();
                final var matcher = LINE_PATTERN.matcher(actualLine);
                if (!matcher.matches()) {
                    feedback = "Can''t parse line: \"{0}\". Expected: {1} is ...";
                    parameters = new Object[]{actualLine, expectedNumber};
                    return false;
                }

                final var rawNumber = matcher.group("number").strip();
                final var actualNumber = NON_DIGIT_SYMBOL.matcher(rawNumber).replaceAll("");

                if (!String.valueOf(expectedNumber).equals(actualNumber)) {
                    feedback = "Expected number is {0} but actual number is {1}.";
                    parameters = new Object[]{expectedNumber, rawNumber};
                    return false;
                }

                final var actualProperties = PROPERTIES_SEPARATOR
                        .splitAsStream(matcher.group("properties").toLowerCase())
                        .collect(Collectors.toUnmodifiableList());

                final var expectedProperties = Arrays
                        .stream(NumberProperty.values())
                        .filter(property -> property.test(expectedNumber))
                        .map(Enum::name)
                        .map(String::toLowerCase)
                        .collect(Collectors.toUnmodifiableSet());

                if (actualProperties.size() != expectedProperties.size()) {
                    feedback = "For the number {0} the expected number of properties is {1} but the actual number of properties is {2}. " +
                            "Expected properties are {3}. Actual properties are {4}";
                    parameters = new Object[]{expectedNumber, expectedProperties.size(),
                            actualProperties.size(), expectedProperties, actualProperties};
                    return false;
                }

                if (!Set.copyOf(actualProperties).equals(expectedProperties)) {
                    feedback = "For the number {0} the expected properties are {1}. The actual properties are {2}.";
                    parameters = new Object[]{expectedNumber, expectedProperties, actualProperties};
                }
            }
            return true;
        }
    }
  learner_created: false
- name: test/NumberProperty.java
  visible: false
  text: |
    import java.util.Optional;
    import java.util.function.LongPredicate;
    import java.util.regex.Pattern;
    import java.util.stream.LongStream;

    import static java.lang.Character.getNumericValue;

    public enum NumberProperty implements LongPredicate {
        BUZZ(x -> x % 7 == 0 || x % 10 == 7),
        DUCK(number -> digits(number).anyMatch(digit -> digit == 0)),
        PALINDROMIC(number -> {
            final var digits = String.valueOf(number);
            return new StringBuilder(digits).reverse().toString().equals(digits);
        }),
        GAPFUL(number -> number >= 100 &&
                number % (getNumericValue(String.valueOf(number).charAt(0)) * 10L + number % 10) == 0),
        EVEN(x -> x % 2 == 0),
        ODD(x -> x % 2 != 0);

        private final LongPredicate hasProperty;
        private final Pattern pattern = Pattern.compile(
                name() + "\\s*[:-]\\s*(?<value>true|false)",
                Pattern.CASE_INSENSITIVE
        );

        NumberProperty(LongPredicate hasProperty) {
            this.hasProperty = hasProperty;
        }

        private static LongStream digits(long number) {
            return Long.toString(number).chars().mapToLong(Character::getNumericValue);
        }

        @Override
        public boolean test(long number) {
            return hasProperty.test(number);
        }

        public Optional<Boolean> extractValue(String output) {
            final var matcher = pattern.matcher(output);
            final var isFound = matcher.find();
            return Optional
                    .ofNullable(isFound ? matcher.group("value") : null)
                    .map(Boolean::valueOf);
        }

    }
  learner_created: false
- name: test/NumbersTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import util.*;

    import java.util.Random;
    import java.util.function.Function;
    import java.util.function.Predicate;
    import java.util.stream.LongStream;

    public final class NumbersTest extends StageTest {
        private static final Random random = new Random();

        private static final int NEGATIVE_NUMBERS_TESTS = 5;
        private static final int FIRST_NUMBERS = 15;
        private static final int RANDOM_TESTS = 10;
        private static final int MAX_COUNT = 20;
        private static final int MIN_START = 2;

        private static final Checker WELCOME = new TextChecker("Welcome to Amazing Numbers!");

        private static final Function<UserProgram, UserProgram> HELP =
                new TextChecker("Supported requests")
                        .andThen(new TextChecker("a natural number"))
                        .andThen(new TextChecker("two natural numbers"))
                        .andThen(new TextChecker("enter 0 to exit"));

        private static final Checker ASK_REQUEST = new TextChecker("enter a request");
        private static final Checker ERROR_FIRST = new TextChecker("first parameter should be a natural number or zero");
        private static final Checker ERROR_SECOND = new TextChecker("second parameter should be a natural number");

        private static final Checker PROPERTIES_OF = new RegexChecker(
                "properties of \\d",
                "The first line of number''s properties should contain \"Properties of {0}\"."
        );
        private static final Checker RUNNING = new Checker(Predicate.not(UserProgram::isFinished),
                "The program should continue to work till the user enter \"0\"."
        );
        private static final Checker FINISHED = new Checker(UserProgram::isFinished,
                "The program should finish when the user entered \"0\"."
        );
        private final UserProgram program = new UserProgram();

        // Stage #3

        @DynamicTest(order = 5)
        CheckResult welcomeTest() {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(repeat = NEGATIVE_NUMBERS_TESTS, order = 10)
        CheckResult notNaturalNumbersTest() {
            long negativeNumber = -random.nextInt(Byte.MAX_VALUE) - 1L;
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(negativeNumber)
                    .check(ERROR_FIRST)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(repeat = RANDOM_TESTS, order = 15)
        CheckResult notNaturalSecondNumberTest() {
            int first = 1 + random.nextInt(Short.MAX_VALUE);
            int negativeSecond = -random.nextInt(Short.MAX_VALUE);
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(first + " " + negativeSecond)
                    .check(ERROR_SECOND)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        // Stage #4

        @DynamicTest(order = 20)
        CheckResult naturalNumbersTest() {
            final var numbers = LongStream.concat(
                    LongStream.range(1, FIRST_NUMBERS),
                    random.longs(RANDOM_TESTS, 1, Long.MAX_VALUE)
            );

            program.start().check(WELCOME).check(HELP);

            numbers.forEach(number -> program
                    .check(ASK_REQUEST)
                    .execute(number)
                    .check(PROPERTIES_OF)
                    .check(new PropertiesChecker(number))
                    .check(RUNNING));

            return program
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(order = 40)
        CheckResult firstNumbersListTest() {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute("1 " + FIRST_NUMBERS)
                    .check(new LinesChecker(FIRST_NUMBERS + 1))
                    .check(new ListChecker(1, FIRST_NUMBERS))
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        private Object[][] getRandomTwo() {
            return random
                    .longs(RANDOM_TESTS, MIN_START, Long.MAX_VALUE - MAX_COUNT)
                    .mapToObj(start -> new Long[]{start, (long) 1 + random.nextInt(MAX_COUNT)})
                    .toArray(Long[][]::new);
        }

        @DynamicTest(data = "getRandomTwo", order = 44)
        CheckResult twoRandomNumbersTest(long start, long count) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(start + " " + count)
                    .check(new LinesChecker(count + 1))
                    .check(new ListChecker(start, count))
                    .check(RUNNING)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

    }
  learner_created: false
- name: test/PropertiesChecker.java
  visible: false
  text: |
    import util.Checker;
    import util.UserProgram;

    public class PropertiesChecker extends Checker {
        private final long number;

        public PropertiesChecker(long number) {
            this.number = number;
            validator = this::test;
        }

        public boolean test(UserProgram program) {
            for (var property : NumberProperty.values()) {
                final var name = property.name();

                if (!program.getOutput().toLowerCase().contains(name.toLowerCase())) {
                    feedback = "The property \"{0}\" was not found in the output.";
                    parameters = new Object[]{name};
                    return false;
                }

                final var expected = property.test(number);
                final var actualValue = property.extractValue(program.getOutput());

                if (actualValue.isEmpty()) {
                    feedback = "The value for property {0} was not found. Expected: {1}";
                    parameters = new Object[]{name, expected};
                    return false;
                }
                final var actual = actualValue.get();

                if (expected != actual) {
                    feedback = "For the property {0}, the expected value is {1} but was found {2}.";
                    parameters = new Object[]{name, expected, actual};
                    return false;
                }
            }
            return true;
        }
    }
  learner_created: false
- name: test/Request.java
  visible: false
  text: |
    import util.LinesChecker;

    import java.util.Random;
    import java.util.regex.Pattern;

    public class Request {
        public static final Pattern PARAMETERS_SEPARATOR = Pattern.compile("\\s+");
        public static final int MAX_COUNT = 20;
        private static final Random random = new Random();

        private final String request;
        private final long start;
        private final int count;
        private String[] properties;

        public Request(String request) {
            this.request = request;
            var data = PARAMETERS_SEPARATOR.split(request, 3);
            int type = data.length;
            properties = type == 3 ? PARAMETERS_SEPARATOR.split(data[2]) : new String[0];
            count = type > 1 ? Integer.parseInt(data[1]) : 0;
            start = Long.parseLong(data[0]);
        }

        public static Request random(Parameter params) {
            final var start = 1 + random.nextInt(Short.MAX_VALUE);
            if (params == Parameter.ONE) {
                return new Request(String.valueOf(start));
            }
            final var count = 1 + random.nextInt(MAX_COUNT);
            if (params == Parameter.TWO) {
                return new Request(start + " " + count);
            }
            final var index = random.nextInt(NumberProperty.values().length);
            final var property = NumberProperty.values()[index].name();
            final var request = start + " " + count + " " + property;
            return new Request(request);
        }

        public long getStart() {
            return start;
        }

        public int getCount() {
            return count;
        }

        public String[] getProperties() {
            return properties;
        }

        public LinesChecker getLinesChecker() {
            return new LinesChecker(count + 1);
        }

        @Override
        public String toString() {
            return request;
        }

        enum Parameter {ONE, TWO, THREE}
    }
  learner_created: false
- name: src/numbers/MagicDetector.java
  visible: true
  text: "package numbers;\n\npublic class MagicDetector{\n    private boolean[] isMagic;\n\
    \    private long MAGICNUM;\n    private StringBuilder msg;\n\n    MagicDetector(){\n\
    \        isMagic = new boolean[]{false, false};\n        MAGICNUM = 7;\n     \
    \   msg = new StringBuilder();\n    }\n\n    public boolean detectMagic(long num){\n\
    \        resetMagic();\n        if(num % MAGICNUM == 0){\n            //magic\
    \ number is detected\n            isMagic[0] = true;\n        }else if(magicCalculated(num)){\n\
    \            isMagic[0] = true;\n        }\n\n        if(num % 10 == MAGICNUM){\n\
    \            isMagic[1] = true;\n        }\n\n        return finalAnalysis(num);\n\
    \    }\n\n    private void resetMagic() {\n        isMagic[0] = false;\n     \
    \   isMagic[1] = false;\n    }\n\n    private boolean finalAnalysis(long num)\
    \ {\n\n        if (isMagic[0] || isMagic[1]){\n            return true;\n    \
    \    }\n\n        return false;\n    }\n\n    private boolean magicCalculated(long\
    \ num) {\n        long remainder = 0, diff = 0, temp = num;\n        do{\n   \
    \         //take last number\n            remainder = temp % 10;\n           \
    \ temp /= 10.0;\n            //multiply it by 2\n            remainder *= 2;\n\
    \            //subtract whatever was left over by result\n            temp -=\
    \ remainder;\n            //if result is not 7 or less\n            if(temp%MAGICNUM\
    \ == 0){\n                return true;\n            }\n\n        }while(temp >\
    \ 10);\n        return false;\n    }\n    \n    \n\n\n}\n"
  learner_created: true
- name: src/numbers/OddDetector.java
  visible: true
  text: |
    package numbers;

    public class OddDetector{
        private boolean isOdd;

        OddDetector(){
            isOdd = false;
        }

        public boolean evenOrOdd(long num){
            return num % 2 != 0;
        }
    }
  learner_created: true
- name: src/numbers/DuckDetector.java
  visible: true
  text: |
    package numbers;

    public class DuckDetector {
        private boolean isDuck;
        private long temp;
        private long duck;

        DuckDetector(){temp = 0; duck = 0;}

        public boolean detectDucking(long num) {
            temp = num;
            while(temp > 0){
                duck = temp % 10;
                temp /= 10;
                if(duck == 0){return true;}
            }
            return false;
        }
    }
  learner_created: true
- name: src/numbers/Property.java
  visible: true
  text: |
    package numbers;

    public class Property {
        private String category;
        private Boolean data;
        Property(String str, boolean b){
            this.category = str;
            this.data = b;
        }

        public Property() {
            this.category = "";
            this.data = null;
        }

        protected String getCategory(){ return category; }

        protected boolean getData(){ return data; }

        protected void setData(boolean input){data = input;}
    }
  learner_created: true
- name: src/numbers/UserInputException.java
  visible: true
  text: |
    package numbers;

    public class UserInputException extends Exception{
        UserInputException(String e){
            super(e);
        }
    }
  learner_created: true
- name: src/numbers/User.java
  visible: true
  text: "package numbers;\nimport java.util.Scanner;\n\npublic class User {\n    private\
    \ Scanner scan;\n    private StringBuilder input;\n    private long value;\n \
    \   User(){\n        scan = new Scanner(System.in);\n        input = new StringBuilder();\n\
    \        value = 0;\n        initWelcome();\n    }\n\n    public void getUserInput(){\n\
    \        try {\n            input.setLength(0);\n            System.out.print(\"\
    Enter a request:\");\n            input.append(scan.nextLine());\n\n         \
    \   for (char d : input.toString().toCharArray()) {\n                if (d < '0'\
    \ || d > '9') {\n                    //throw some error\n                    throw\
    \ new UserInputException\n                            (\"\\nThe first parameter\
    \ should be a natural number or zero.\\n\");\n                }\n            }\n\
    \            value = Long.parseLong(input.toString());\n            if(!isValid()){\n\
    \                throw new UserInputException\n                        (\"\\nThe\
    \ first parameter should be a natural number or zero.\\n\");\n            }\n\
    \        }catch (UserInputException ex){\n            System.out.println(ex.getMessage());\n\
    \        }finally{\n            value = Long.parseLong(input.toString());\n  \
    \      }\n    }\n\n    private void initWelcome() {\n        System.out.println(\"\
    \"\"\n                Welcome to Amazing Numbers!\n                          \
    \      \n                Supported requests:\n                - enter a natural\
    \ number to know its properties;\n                - enter 0 to exit.\n       \
    \         \"\"\");\n    }\n\n    public boolean isValid() { return value >= 0;\
    \ }\n\n    public long getStoredValue(){ return this.value;}\n\n}\n"
  learner_created: true
- name: src/numbers/Properties.java
  visible: true
  text: |
    package numbers;

    import java.util.ArrayList;
    import java.util.Arrays;

    public class Properties {
        private ArrayList<String> attributes;
        private ArrayList<Property> detailedList;
        private long storedValue;
        private StringBuilder msg;

        private OddDetector oddDetective;
        private MagicDetector mageDetective;
        private DuckDetector duckDetective;

        private Palindrome palidetective;

        interface Detective{

            boolean detect();
        }
        private Detective[] detectives = new Detective[]{
                new Detective(){ public boolean detect(){return !oddDetective.evenOrOdd(storedValue);}},
                new Detective(){ public boolean detect(){return oddDetective.evenOrOdd(storedValue);}},
                new Detective(){ public boolean detect(){return mageDetective.detectMagic(storedValue);}},
                new Detective(){ public boolean detect(){return duckDetective.detectDucking(storedValue);}},
                new Detective(){ public boolean detect(){return palidetective.detectPalindrome(storedValue);}}

        };

        Properties(){
            initAttributes();
            initDetectives();
            initList();
            this.storedValue = 0;
        }
        private void initAttributes() {
            attributes = new ArrayList<String>(
                    Arrays.asList("even", "odd", "buzz", "duck", "palindromic")
            );
        }

        private void initList(){
            detailedList = new ArrayList<Property>();
            while(detailedList.size() < attributes.size()){
                detailedList.add(new Property());
            }
        }

        private void initDetectives(){
            oddDetective = new OddDetector();
            mageDetective = new MagicDetector();
            duckDetective = new DuckDetector();
            palidetective = new Palindrome();
        }
        public void analyze(long num){

            msg = new StringBuilder("Properties of %,d\n" .formatted(num));

            for(int i = 0; i < attributes.size(); i++)
                detailedList.set(i, new Property(attributes.get(i),detectives[i].detect()));
            printProperties();
            resetList();
        }

        private void printProperties() {
            for(Property prop : detailedList){
                msg.append("%16.16s: %b\n" .formatted(prop.getCategory(), prop.getData()));
            }
            System.out.println(msg.toString());
        }

        private void resetList(){
            for(int i = 0; i < attributes.size(); i++)
                detailedList.get(i).setData(false);
        }
        public void storeUserInput(long storedValue) { this.storedValue = storedValue; }
    }
  learner_created: true
- name: src/numbers/Palindrome.java
  visible: true
  text: |
    package numbers;

    public class Palindrome {

        long temp;
        long palindrome;
        Palindrome(){temp = 0; palindrome = 0;}

        protected boolean detectPalindrome(long num){
            initFields(num);
            while(temp > 0){
                palindrome *= 10;
                palindrome += temp % 10;
                temp /= 10;
            }

            return palindrome == num;
        }

        private void initFields(long num){
            temp = num;
            palindrome = 0;
        }
    }
  learner_created: true
- name: src/numbers/GapDetector.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13201#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 20 Jan 2023 19:23:58 UTC"
record: 2
